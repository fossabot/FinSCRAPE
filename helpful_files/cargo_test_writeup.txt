the tests were all working fine including the latest, which failed properly last time I ran
cargo test. Now with the function coded to pass this test, nothing happens after cargo test builds

This is the output of cargo test:

    Finished dev [unoptimized + debuginfo] target(s) in 1.65s
     Running target\debug\deps\FinSCRAPE-c694332d940847da.exe
error: test failed, to rerun pass '--bin FinSCRAPE'

Nothing else, no list of tests, no "X passed, X failed", no nothing.

this is the output of rustup show

Default host: x86_64-pc-windows-msvc

stable-x86_64-pc-windows-msvc (default)
rustc 1.32.0 (9fda7c223 2019-01-16)

this is my Cargo.toml

[package]
name = "FinSCRAPE"
version = "0.1.0"
authors = ["user"]
edition = "2018"

[dependencies]
reqwest = "0.9.8"
rusqlite = "0.16.0"
lettre = "0.8.3"
csv = "1.0.5"
serde_json = "1.0.36"
systemstat = "0.1.3"
serde = "1.0.84"
serde_derive = "1.0.84"

even when I run selected tests that I know pass, I get the same cryptic response

this is my mod tests in the same file as my functions

mod tests {
    use super::*;

    //utils
    fn get_fake_data()-> (HashMap<String, CryptoFiat>, u64) {
        let json = fs::read_to_string("response_crypto.txt")
        .expect("Something went wrong reading the file");

        let timestamp = SystemTime::now().duration_since(UNIX_EPOCH).unwrap().as_secs();

        let mut frame = HashMap::new();
        let data: Value = serde_json::from_str(&json).expect("unable to convert response text to untyped object");
        let object = data.as_object().expect("unable to convert outer values to map");
        let object = object["RAW"].as_object().expect("unable to convert inner values to map");
        for crypto in object.keys() {
            for fiat in object[crypto].as_object().unwrap().keys() {
                let pair_block: CryptoFiat = serde_json::from_value(object[crypto][fiat].clone()).expect("failed to convert untyped map to typed struct");
                frame.entry(format!("{}-{}", crypto, fiat)).or_insert(pair_block);
            }
        }

        (frame, timestamp)


    }

    #[test]
    fn get_fake_data_returns_valid_frame() {
        let (frame, timestamp) = get_fake_data();
        if frame["BTC-USD"].crypto_symbol != "BTC" ||
           frame["BTC-USD"].fiat_symbol != "USD" {
               panic!("get_fake_data returned an invalid frame");
           }
    }



    //unit tests
    #[test]
    fn set_disk_group(){
        panic!("not implemented");
    }


    #[test]
    fn notify_group(){
        panic!("not implemented");
    }


    fn get_data_sleeps_till_30() -> Result<(), ()>{
        let (frame, timestamp) = get_data();
        if timestamp % 30 == 0 {
            Ok(())
        } else {
            Err(())
        }
    }

    fn get_data_creates_valid_frame() -> Result<(), ()> {
        let (frame, timestamp) = get_data();
        if frame["BTC-USD"].crypto_symbol == "BTC" &&
           frame["BTC-USD"].fiat_symbol == "USD"
        {
            Ok(())
        }
        else {
            Err(())
        }
    }

    fn get_data_frame_has_all_crypto() -> Result<(), ()> {
        let (frame, timestamp) = get_data();
        if frame.len() == 32 {
            Ok(())
        } else {
            Err(())
        }
    }

    #[test]
    #[ignore]
    fn get_data_group(){
        get_data_sleeps_till_30().expect("the request did not happen on a round 30 seconds");
        get_data_creates_valid_frame().expect("get_data returned an invalid frame");
        get_data_frame_has_all_crypto().expect("frame does not contain enough crypto-USD pairs");
    }


    fn arrange_vec_has_29_items() -> Result<(), ()> {
        let (frame, timestamp) = get_fake_data();
        let pair = &frame["BTC-USD"];
        let writeVEC = arrange_vec(&pair, &timestamp);
        if writeVEC.len() == 29 {
            Ok(())
        } else {
            Err(())
        }
    }

    fn arrange_vec_returns_valid_writevec() -> Result<(), ()> {
        let (frame, timestamp) = get_fake_data();
        let pair = &frame["BTC-USD"];
        let writeVEC = arrange_vec(&pair, &timestamp);
        if writeVEC[0].len() == 10 &&
            //market
           writeVEC[3] == "Coinbase" &&
           //volume24h
           writeVEC[7] == "37533.51939446323" &&
           //volume_day_fiat
           writeVEC[11] == "140675918.74609685" &&
           //change_pct_day
           writeVEC[15] == "2.3316949881989917" &&
           //market_cap
           writeVEC[19] == "65291977762.5" &&
           //low_24h
           writeVEC[28] == "3643.41"
        {
            Ok(())
        } else {
            Err(())
        }
    }

    #[test]
    fn arrange_vec_test_group(){
        arrange_vec_has_29_items().expect("arrange_vec returns an incorrect number of items");
        arrange_vec_returns_valid_writevec().expect("arrange_vec returns an invalid writeVEC")
    }


    fn write_data_creates_db_when_none() -> Result <(), ()> {
        let mut master = DB {
            path: Some("test.db".to_string()),
            storage_device: None
        };

        //get paths
        let cargo = env::current_dir().expect("unable to find current dir");
        let cargo = cargo.to_str().expect("path is invalid unicode");
        let db_path = format!("{}/src", cargo).to_string();

        let filesInSrc = fs::read_dir(&db_path).expect("failed to read contents of download directory");

        for fileNAME in filesInSrc {
            let entry = fileNAME.expect("DirEntry returned 0");
            let fileNAME: String = entry.file_name()
                                //this converts the OSstr into a string slice
                                .into_string()
                                .expect("the file_name could not be converted to a string")
                                //this converts the string slice into an owned string
                                .to_owned().clone();

            if fileNAME.contains("test.master") {
                fs::remove_file(&entry.path()).expect("failed to remove file after match");
            }
        }

        let (frame, timestamp) = get_fake_data();
        write_data(&frame, &timestamp, master);

        let filesInSrc = fs::read_dir(&db_path).expect("failed to read contents of download directory");

        for fileNAME in filesInSrc {
            let entry = fileNAME.expect("DirEntry returned 0");
            let fileNAME: String = entry.file_name()
                                //this converts the OSstr into a string slice
                                .into_string()
                                .expect("the file_name could not be converted to a string")
                                //this converts the string slice into an owned string
                                .to_owned().clone();

            if fileNAME.contains("test.master"){                
                fs::remove_file(&entry.path()).expect("failed to remove file after match");
                return Ok(());
            }
        }


        return Err(());
    }

    fn write_data_adds_valid_tables_to_db() -> Result <(), ()> {
        Err(())
    }

    fn write_data_adds_valid_row_to_table() -> Result <(), ()> {
        Err(())
    }

    #[test]
    fn write_data_group(){
        write_data_creates_db_when_none().expect("write_data failed to create master");
    }


    #[test]
    fn queue_frames_group(){
        panic!("not implemented");
    }


    #[test]
    fn set_labels_group(){
        panic!("not implemented");
    }


    #[test]
    fn measure_group(){
        panic!("not implemented");
    }


    #[test]
    fn inform_agent_group(){
        panic!("not implemented");
    }


    #[test]
    fn get_agent_metrics_group(){
        panic!("not implemented");
    }


    #[test]
    fn get_agent_config_group(){
        panic!("not implemented");
    }
}